CREATE FUNCTION add_user(
    p_login VARCHAR,
    p_password VARCHAR,
    p_age INT,
    p_height REAL,
    p_goal VARCHAR,
    p_fitness_level INT,
    p_available_days INT
) RETURNS INT AS $$
DECLARE
    new_user_id INT;
BEGIN
    INSERT INTO users (
        login, password, age, height, goal, fitness_level, available_days, role
    ) VALUES (
        p_login, p_password, p_age, p_height, p_goal, p_fitness_level, p_available_days, 'user'
    ) RETURNING user_id INTO new_user_id;

    RETURN new_user_id;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION add_admin(
    p_login VARCHAR,
    p_password VARCHAR
) RETURNS INT AS $$
DECLARE
    new_admin_id INT;
BEGIN
    INSERT INTO users (
        login, password, role
    ) VALUES (
        p_login, p_password, 'admin'
    ) RETURNING user_id INTO new_admin_id;

    RETURN new_admin_id;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION add_exercise(
    p_created_by INT,
    p_name VARCHAR,
    p_muscle_group VARCHAR,
    p_description VARCHAR
) RETURNS INT AS $$
DECLARE
    new_exercise_id INT;
BEGIN
    INSERT INTO exercises (
        created_by, when_created, name, muscle_group, description
    ) VALUES (
        p_created_by, CURRENT_DATE, p_name, p_muscle_group, p_description
    ) RETURNING exercise_id INTO new_exercise_id;

    RETURN new_exercise_id;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION add_exercise_working_weight(
    p_exercise_id INT,
    p_user_id INT,
    p_weight INT
) RETURNS INT AS $$
DECLARE
    new_exercise_working_weight_id INT;
BEGIN
    INSERT INTO exercise_working_weight (
        exercise_id, user_id, weight, weight_date
    ) VALUES (
        p_exercise_id, p_user_id, p_weight, CURRENT_DATE
    ) RETURNING exercise_working_weight_id INTO new_exercise_working_weight_id;

    RETURN new_exercise_working_weight_id;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION add_weight_journal(
    p_user_id INT,
    p_weight REAL
) RETURNS INT AS $$
DECLARE
    new_weight_journal_id INT;
BEGIN
    INSERT INTO weight_journal (
        user_id, weight, weight_date
    ) VALUES (
        p_user_id, p_weight, CURRENT_DATE
    ) RETURNING weight_journal_id INTO new_weight_journal_id;

    RETURN new_weight_journal_id;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION add_meal(
    p_created_by INT,
    p_name VARCHAR,
    p_calories REAL,
    p_protein REAL,
    p_fats REAL,
    p_carbs REAL
) RETURNS INT AS $$
DECLARE
    new_meal_id INT;
BEGIN
    INSERT INTO meals (
        created_by, when_created, name, calories, protein, fats, carbs
    ) VALUES (
        p_created_by, CURRENT_DATE, p_name, p_calories, p_protein, p_fats, p_carbs
    ) RETURNING meal_id INTO new_meal_id;

    RETURN new_meal_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION add_allergy(
    p_created_by INT,
    p_name VARCHAR
) RETURNS INT AS $$
DECLARE
    new_allergy_id INT;
BEGIN
    INSERT INTO allergies (
        created_by, when_created, name
    ) VALUES (
        p_created_by, CURRENT_DATE, p_name
    ) RETURNING allergy_id INTO new_allergy_id;

    RETURN new_allergy_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION add_diet_day_admin(
    p_created_by INT,
    p_name VARCHAR,
    p_calories REAL,
    p_portion_size REAL
) RETURNS INT AS $$
DECLARE
    new_diet_day_admin_id INT;
BEGIN
    INSERT INTO diet_day_admin (
        created_by, when_created, name, calories, portion_size
    ) VALUES (
        p_created_by, CURRENT_DATE, p_name, p_calories, p_portion_size
    ) RETURNING diet_day_admin_id INTO new_diet_day_admin_id;

    RETURN new_diet_day_admin_id;
END;
$$ LANGUAGE plpgsql;


