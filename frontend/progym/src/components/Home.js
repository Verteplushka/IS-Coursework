import React, { useEffect, useState } from "react";
import {
  Container,
  Typography,
  Card,
  CardContent,
  List,
  ListItem,
  Box,
  Divider,
  Grid,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from "@mui/material";
import Header from "./Header";
import { useNavigate } from "react-router-dom";
import axios from "axios";

const HomePage = () => {
  const [diet, setDiet] = useState(null);
  const [training, setTraining] = useState(null);
  const [isTrainingCompleted, setIsTrainingCompleted] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const [isEndingSoon, setIsEndingSoon] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);
  const token = localStorage.getItem("access_token");
  const navigate = useNavigate();
  const [userParams, setUserParams] = useState(null);

  useEffect(() => {
    if (!token) return;

    fetch("http://localhost:8080/api/user/get_user_params", {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => res.json())
      .then((data) => {
        console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        setUserParams(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setIsEndingSoon(data.endingSoon);
        if (data.endingSoon) {
          console.log(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–π–Ω—ã–π –ø–ª–∞–Ω –≤—Å–µ, –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π: ",
            data.endingSoon
          ); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          setOpenDialog(true);
        }
      })
      .catch(console.error);
  }, [token]);

  const handleContinue = async () => {
    try {
      const dayResponse = await axios.get(
        "http://localhost:8080/api/general/get_day",
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (userParams) {
        const updatedParams = {
          ...userParams,
          startTraining: dayResponse.data,
        };

        await axios.post(
          "http://localhost:8080/api/user/sendForm",
          updatedParams,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        window.location.reload();
      }

      setOpenDialog(false);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
  };

  const handleUpdate = () => {
    navigate("/userform");
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–µ—Ç—ã
  const regenerateDiet = () => {
    fetch("http://localhost:8080/api/user/regenerate_today_diet", {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    })
      .then(() => fetchDiet())
      .catch(console.error);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const regenerateTraining = () => {
    fetch("http://localhost:8080/api/user/regenerate_today_training", {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    })
      .then(() => fetchTraining())
      .catch(console.error);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  const completeTraining = () => {
    fetch("http://localhost:8080/api/user/complete_training", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    })
      .then((res) => res.text())
      .then((message) => {
        setIsTrainingCompleted(true); // –ü–æ–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
      })
      .catch(console.error);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const uncompleteTraining = () => {
    fetch("http://localhost:8080/api/user/uncomplete_training", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
      .then((res) => res.text())
      .then((message) => {
        setIsTrainingCompleted(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      })
      .catch(console.error);
  };

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–µ—Ç–µ
  const fetchDiet = () => {
    fetch("http://localhost:8080/api/user/get_today_diet", {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => res.json())
      .then(setDiet)
      .catch(console.error);
  };

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  const fetchTraining = () => {
    fetch("http://localhost:8080/api/user/get_today_training", {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => res.json())
      .then((data) => {
        setTraining(data);
        setIsTrainingCompleted(data.completed); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      })
      .catch(console.error);
  };

  const [isLazy, setIsLazy] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω–∏–≤–æ—Å—Ç–∏
  const [openMotivationalDialog, setOpenMotivationalDialog] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
  const [loading, setLoading] = useState(true);
  const [motivationalLink, setMotivationalLink] = useState(""); // –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ

  // –°–ø–∏—Å–æ–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
  const motivationalVideos = [
    "https://www.youtube.com/watch?v=8Y1HcUOr8io",
    "https://www.youtube.com/watch?v=RJQisT_dndc",
    "https://www.youtube.com/watch?v=DFJcnag8S0c",
    "https://www.youtube.com/watch?v=7cSHcUP-8Os",
  ];

  // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  const motivationalMessages = [
    "¬´–ß–µ–º–ø–∏–æ–Ω–∞–º–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã—Ö –∑–∞–ª–∞—Ö. –ß–µ–º–ø–∏–æ–Ω–∞ —Ä–æ–∂–¥–∞–µ—Ç —Ç–æ, —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –≤–Ω—É—Ç—Ä–∏ ‚Äî –∂–µ–ª–∞–Ω–∏—è, –º–µ—á—Ç—ã, —Ü–µ–ª–∏¬ª, ‚Äî –ú—É—Ö–∞–º–º–µ–¥ –ê–ª–∏ üöÄ",
    "¬´–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–ª –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ¬´—Å–¥–∞—Ç—å—Å—è¬ª¬ª, ‚Äî –ñ–∞–Ω-–ö–ª–æ–¥ –í–∞–Ω –î–∞–º–º üí™",
    "¬´–¢–æ—Ç, –∫—Ç–æ —Ö–æ—á–µ—Ç –¥–æ–±–∏—Ç—å—Å—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥, –æ–±—è–∑–∞–Ω –ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä—ã–≥–Ω—É—Ç—å –≤—ã—à–µ –≥–æ–ª–æ–≤—ã¬ª, ‚Äî –õ–µ–≤ –Ø—à–∏–Ω üåü",
    "¬´–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è —Å —Ç–µ–º–∏, –∫—Ç–æ —Å–∏–ª—å–Ω–µ–µ. –ù–µ —Å–¥–∞–≤–∞–π—Å—è —Ç–∞–º, –≥–¥–µ —Å–¥–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ. –ò –ø–æ–±–µ–¥–∏—à—å —Ç–∞–º, –≥–¥–µ –ø–æ–±–µ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è¬ª, ‚Äî –ë—Ä—é—Å –õ–∏ üî•",
    "¬´–°–∏–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤—ã–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—à—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ‚Äî –∏ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –∑–∞–ª–µ, –∏ –≤ –∂–∏–∑–Ω–∏¬ª, ‚Äî –ê—Ä–Ω–æ–ª—å–¥ –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä üí™",
  ];

  const fetchStatistics = async () => {
    if (!token) {
      console.error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return;
    }

    try {
      // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω–∏–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const lazyResponse = await fetch(
        "http://localhost:8080/api/user/is_user_lazy",
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (!lazyResponse.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–µ–Ω–∏–≤–æ—Å—Ç–∏");
      }

      const isLazy = await lazyResponse.json();

      console.log("Is user lazy?", isLazy);

      setIsLazy(isLazy); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω–∏–≤–æ—Å—Ç–∏

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–µ–Ω–∏–≤—ã–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      if (isLazy) {
        const randomLink =
          motivationalVideos[
            Math.floor(Math.random() * motivationalVideos.length)
          ];
        setMotivationalLink(randomLink);
        setOpenMotivationalDialog(true);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!token) return;
    fetchStatistics();

    fetchDiet();
    fetchTraining();
  }, [token]);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const mealGroups = diet
    ? diet.meals.reduce((acc, meal) => {
        if (!acc[meal.mealPosition]) {
          acc[meal.mealPosition] = [];
        }
        acc[meal.mealPosition].push(meal);
        return acc;
      }, {})
    : {};

  const mealTitles = {
    BREAKFAST: "–ó–∞–≤—Ç—Ä–∞–∫",
    LUNCH: "–û–±–µ–¥",
    DINNER: "–£–∂–∏–Ω",
    SNACK: "–ü–µ—Ä–µ–∫—É—Å",
  };

  return (
    <>
      <Header />
      <Container maxWidth="md" sx={{ mt: 4 }}>
        {/* –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –ª–µ–Ω–∏–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        {isLazy && (
          <Box sx={{ mb: 4 }}>
            <Card sx={{ p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  üö® –ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Ç—ã –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–∏–Ω–∏–ª—Å—è, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç!
                </Typography>

                <Typography variant="body1" sx={{ mb: 2 }}>
                  {
                    motivationalMessages[
                      Math.floor(Math.random() * motivationalMessages.length)
                    ]
                  }
                </Typography>
                <Typography variant="body1" sx={{ mb: 2 }}>
                  –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ progym2004 –ø–æ–¥–æ–±—Ä–∞–ª–∞ —ç—Ç–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
                  —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!
                </Typography>
                <iframe
                  width="100%"
                  height="315"
                  src={motivationalLink.replace("watch?v=", "embed/")} // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
                  title="Motivational Video"
                  frameBorder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowFullScreen
                ></iframe>
              </CardContent>
            </Card>
          </Box>
        )}
        <Grid container spacing={10}>
          {/* –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ */}
          <Dialog open={openDialog} onClose={handleContinue}>
            <DialogTitle>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</DialogTitle>
            <DialogContent>
              <DialogContentText>
                –í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è, –∞ –º–æ–∂–µ—Ç –∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.
                –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?
              </DialogContentText>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleContinue} color="primary">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </Button>
              <Button onClick={handleUpdate} color="secondary">
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </DialogActions>
          </Dialog>
          {/* –ë–ª–æ–∫ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π */}
          <Grid item xs={12} md={6}>
            <Card sx={{ p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
                </Typography>
                {training && training.exercises.length > 0 ? (
                  <List>
                    {training.exercises.map((exercise) => (
                      <ListItem
                        key={exercise.id}
                        sx={{
                          display: "flex",
                          flexDirection: "column",
                          alignItems: "start",
                        }}
                      >
                        <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                          {exercise.name}
                        </Typography>
                        <Typography
                          variant="body2"
                          sx={{ fontStyle: "italic" }}
                        >
                          {exercise.description}
                        </Typography>
                        <Box sx={{ height: 10 }} />
                        <Typography variant="body2">
                          <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong>
                          {exercise.execution_instructions}
                        </Typography>
                        {exercise.sets && exercise.repetitions ? (
                          <Typography variant="body2" sx={{ color: "gray" }}>
                            –ü–æ–¥—Ö–æ–¥—ã: {exercise.sets}, –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:{" "}
                            {exercise.repetitions}
                          </Typography>
                        ) : (
                          <Typography variant="body2" sx={{ color: "gray" }}>
                            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–µ –∑–∞–¥–∞–Ω–æ, –¥–µ–ª–∞–π—Ç–µ –ø–æ
                            –æ—â—É—â–µ–Ω–∏—è–º
                          </Typography>
                        )}
                        <Divider sx={{ my: 1, width: "100%" }} />
                      </ListItem>
                    ))}
                  </List>
                ) : (
                  <Typography sx={{ fontStyle: "italic", color: "gray" }}>
                    –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö
                    –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–µ–Ω, —á–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ú–æ–∂–µ—Ç, —É—Å—Ç—Ä–æ–∏—à—å —Å–µ–±–µ —á–∏–ª–æ–≤—ã–π
                    –≤–µ—á–µ—Ä —Å —Ñ–∏–ª—å–º–æ–º –∏ –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π? üçïüé¨
                  </Typography>
                )}

                {/* –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –µ—Å—Ç—å */}
                {training &&
                  training.exercises.length > 0 &&
                  !isTrainingCompleted && (
                    <>
                      {diet && (
                        <Typography
                          variant="body1"
                          sx={{
                            mt: 2,
                            fontStyle: "italic",
                            color: "primary.main",
                            fontSize: "0.9rem",
                          }}
                        >
                          –≠—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞... –ö—Ç–æ –µ–µ –≤–æ–æ–±—â–µ –ø—Ä–∏–¥—É–º–∞–ª? –°—Ä–æ—á–Ω–æ
                          –Ω–µ—Å–∏—Ç–µ –¥—Ä—É–≥—É—é
                        </Typography>
                      )}
                      <Button
                        onClick={regenerateTraining}
                        variant="contained"
                        sx={{ mt: 2, mr: 2 }}
                      >
                        –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                      </Button>
                      <Button
                        onClick={completeTraining}
                        variant="contained"
                        color="success"
                        sx={{ mt: 2 }}
                      >
                        –Ø –≤—ã–ø–æ–ª–Ω–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!
                      </Button>
                    </>
                  )}

                {/* –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ */}
                {isTrainingCompleted && (
                  <>
                    <Typography
                      variant="body1"
                      sx={{ fontStyle: "italic", color: "green" }}
                    >
                      –ú–æ–ª–æ–¥–µ—Ü! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üéâ
                    </Typography>
                    <Button
                      onClick={uncompleteTraining}
                      variant="contained"
                      color="error"
                      sx={{ mt: 2 }}
                    >
                      –Ø –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                    </Button>
                  </>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* –ë–ª–æ–∫ —Å –¥–∏–µ—Ç–æ–π */}
          <Grid item xs={12} md={6}>
            <Card sx={{ mb: 3, p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∏–µ—Ç–∞
                </Typography>
                {diet ? (
                  <>
                    <Typography variant="h6" color="primary">
                      {diet.name}
                    </Typography>
                    <Typography variant="body1">
                      –ö–∞–ª–æ—Ä–∏–∏: {Math.round(diet.calories)} –∫–∫–∞–ª
                    </Typography>
                    <Typography variant="body1">
                      –ë–µ–ª–∫–∏: {Math.round(diet.protein)} –≥
                    </Typography>
                    <Typography variant="body1">
                      –ñ–∏—Ä—ã: {Math.round(diet.fats)} –≥
                    </Typography>
                    <Typography variant="body1">
                      –£–≥–ª–µ–≤–æ–¥—ã: {Math.round(diet.carbs)} –≥
                    </Typography>
                    <Divider sx={{ my: 2 }} />

                    {Object.keys(mealGroups).map((key) => (
                      <Box key={key} sx={{ mb: 2 }}>
                        <Typography variant="h6" sx={{ color: "#3f51b5" }}>
                          {mealTitles[key]}
                        </Typography>
                        <List>
                          {mealGroups[key].map((meal) => (
                            <ListItem
                              key={meal.id}
                              sx={{
                                display: "flex",
                                flexDirection: "column",
                                alignItems: "start",
                              }}
                            >
                              <Typography
                                variant="body1"
                                sx={{ fontWeight: "bold" }}
                              >
                                {meal.name}
                              </Typography>
                              <Typography variant="body2">
                                –ü–æ—Ä—Ü–∏—è: {Math.round(meal.portionSize)} –≥
                              </Typography>
                              <Typography variant="body2">
                                –ö–∞–ª–æ—Ä–∏–∏: {Math.round(meal.calories)} –∫–∫–∞–ª
                              </Typography>
                              <Typography variant="body2">
                                –ë–µ–ª–∫–∏: {Math.round(meal.protein)} –≥
                              </Typography>
                              <Typography variant="body2">
                                –ñ–∏—Ä—ã: {Math.round(meal.fats)} –≥
                              </Typography>
                              <Typography variant="body2">
                                –£–≥–ª–µ–≤–æ–¥—ã: {Math.round(meal.carbs)} –≥
                              </Typography>
                            </ListItem>
                          ))}
                        </List>
                      </Box>
                    ))}
                  </>
                ) : (
                  <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–µ—Ç–µ...</Typography>
                )}

                {diet && (
                  <Typography
                    variant="body1"
                    sx={{
                      mt: 2,
                      fontStyle: "italic",
                      color: "primary.main",
                      fontSize: "0.9rem",
                    }}
                  >
                    –≠—Ç–∞ –¥–∏–µ—Ç–∞ –º–Ω–µ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥—É—é
                  </Typography>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–µ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–µ—Ç–µ –µ—Å—Ç—å */}
                {diet && (
                  <Button
                    onClick={regenerateDiet}
                    variant="contained"
                    sx={{ mt: 2 }}
                  >
                    –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–µ—Ç—É
                  </Button>
                )}
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Container>
    </>
  );
};

export default HomePage;
