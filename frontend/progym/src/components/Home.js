import React, { useEffect, useState } from "react";
import {
  Container,
  Typography,
  Card,
  CardContent,
  List,
  ListItem,
  Box,
  Divider,
  Grid,
  Button,  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
} from "@mui/material";
import Header from "./Header";

const HomePage = () => {
  const [diet, setDiet] = useState(null);
  const [training, setTraining] = useState(null);
  const token = localStorage.getItem("access_token");

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–µ—Ç—ã
  const regenerateDiet = () => {
    fetch("http://localhost:8080/api/user/regenerate_today_diet", {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    })
      .then(() => fetchDiet())
      .catch(console.error);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const regenerateTraining = () => {
    fetch("http://localhost:8080/api/user/regenerate_today_training", {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    })
      .then(() => fetchTraining())
      .catch(console.error);
  };

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–µ—Ç–µ
  const fetchDiet = () => {
    fetch("http://localhost:8080/api/user/get_today_diet", {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => res.json())
      .then(setDiet)
      .catch(console.error);
  };

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  const fetchTraining = () => {
    fetch("http://localhost:8080/api/user/get_today_training", {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => res.json())
      .then(setTraining)
      .catch(console.error);
  };

  useEffect(() => {
    if (!token) return;

    fetchDiet();
    fetchTraining();
  }, [token]);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const mealGroups = diet
    ? diet.meals.reduce((acc, meal) => {
        if (!acc[meal.mealPosition]) {
          acc[meal.mealPosition] = [];
        }
        acc[meal.mealPosition].push(meal);
        return acc;
      }, {})
    : {};

  const mealTitles = {
    BREAKFAST: "–ó–∞–≤—Ç—Ä–∞–∫",
    LUNCH: "–û–±–µ–¥",
    DINNER: "–£–∂–∏–Ω",
    SNACK: "–ü–µ—Ä–µ–∫—É—Å",
  };

  return (
    <>
      <Header userName="–ò–≤–∞–Ω" />
      <Container maxWidth="md" sx={{ mt: 4 }}>
        <Grid container spacing={3}>
          {/* –ë–ª–æ–∫ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π */}
          <Grid item xs={12} md={6}>
            <Card sx={{ p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
                </Typography>
                {training && training.exercises.length > 0 ? (
                  <List>
                    {training.exercises.map((exercise) => (
                      <ListItem key={exercise.id} sx={{ display: "flex", flexDirection: "column", alignItems: "start" }}>
                        <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                          {exercise.name} ({exercise.muscleGroup})
                        </Typography>
                        <Typography variant="body2" sx={{ fontStyle: "italic" }}>
                          {exercise.description}
                        </Typography>
                        <Typography variant="body2">
                          <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong> {exercise.execution_instructions}
                        </Typography>
                        {exercise.sets && exercise.repetitions ? (
                          <Typography variant="body2">
                            –ü–æ–¥—Ö–æ–¥—ã: {exercise.sets}, –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {exercise.repetitions}
                          </Typography>
                        ) : (
                          <Typography variant="body2" sx={{ color: "gray" }}>
                            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–µ –∑–∞–¥–∞–Ω–æ, –¥–µ–ª–∞–π—Ç–µ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
                          </Typography>
                        )}
                        <Divider sx={{ my: 1, width: "100%" }} />
                      </ListItem>
                    ))}
                  </List>
                ) : (
                  <Typography sx={{ fontStyle: "italic", color: "gray" }}>
                    –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç, –º–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å! –ú–æ–∂–µ—Ç, —É—Å—Ç—Ä–æ–∏—à—å
                    —Å–µ–±–µ —á–∏–ª–æ–≤—ã–π –≤–µ—á–µ—Ä —Å —Ñ–∏–ª—å–º–æ–º –∏ –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π? üçïüé¨
                  </Typography>
                )}
                <Button onClick={regenerateTraining} variant="contained" sx={{ mt: 2 }}>
                  –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                </Button>
              </CardContent>
            </Card>
          </Grid>

          {/* –ë–ª–æ–∫ —Å –¥–∏–µ—Ç–æ–π */}
          <Grid item xs={12} md={6}>
            <Card sx={{ mb: 3, p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∏–µ—Ç–∞
                </Typography>
                {diet ? (
                  <>
                    <Typography variant="h6" color="primary">
                      {diet.name}
                    </Typography>
                    <Typography variant="body1">
                      –ö–∞–ª–æ—Ä–∏–∏: {diet.calories.toFixed(2)} –∫–∫–∞–ª
                    </Typography>
                    <Typography variant="body1">
                      –ë–µ–ª–∫–∏: {diet.protein.toFixed(2)} –≥
                    </Typography>
                    <Typography variant="body1">
                      –ñ–∏—Ä—ã: {diet.fats.toFixed(2)} –≥
                    </Typography>
                    <Typography variant="body1">
                      –£–≥–ª–µ–≤–æ–¥—ã: {diet.carbs.toFixed(2)} –≥
                    </Typography>
                    <Divider sx={{ my: 2 }} />

                    {Object.keys(mealGroups).map((key) => (
                      <Box key={key} sx={{ mb: 2 }}>
                        <Typography variant="h6" sx={{ color: "#3f51b5" }}>
                          {mealTitles[key]}
                        </Typography>
                        <List>
                          {mealGroups[key].map((meal) => (
                            <ListItem
                              key={meal.id}
                              sx={{
                                display: "flex",
                                flexDirection: "column",
                                alignItems: "start",
                              }}
                            >
                              <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                                {meal.name}
                              </Typography>
                              <Typography variant="body2">
                                –ü–æ—Ä—Ü–∏—è: {meal.portionSize.toFixed(2)} –≥
                              </Typography>
                              <Typography variant="body2">
                                –ö–∞–ª–æ—Ä–∏–∏: {meal.calories.toFixed(2)} –∫–∫–∞–ª
                              </Typography>
                              <Typography variant="body2">
                                –ë–µ–ª–∫–∏: {meal.protein.toFixed(2)} –≥
                              </Typography>
                              <Typography variant="body2">
                                –ñ–∏—Ä—ã: {meal.fats.toFixed(2)} –≥
                              </Typography>
                              <Typography variant="body2">
                                –£–≥–ª–µ–≤–æ–¥—ã: {meal.carbs.toFixed(2)} –≥
                              </Typography>
                            </ListItem>
                          ))}
                        </List>
                      </Box>
                    ))}
                  </>
                ) : (
                  <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–µ—Ç–µ...</Typography>
                )}
                <Button onClick={regenerateDiet} variant="contained" sx={{ mt: 2 }}>
                  –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–µ—Ç—É
                </Button>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Container>
    </>
  );
};

export default HomePage;
