import React, { useEffect, useState } from "react";
import Header from "./Header";
import {
  Container,
  Grid,
  Card,
  CardContent,
  Typography,
  Box,
  LinearProgress,
  Divider,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from "@mui/material";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Profile = () => {
  const [trainingStats, setTrainingStats] = useState(null);
  const [dietStats, setDietStats] = useState(null);
  const [weightProgress, setWeightProgress] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞
  const [loading, setLoading] = useState(true);
  const [isLazy, setIsLazy] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω–∏–≤–æ—Å—Ç–∏
  const [openMotivationalDialog, setOpenMotivationalDialog] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
  const [motivationalLink, setMotivationalLink] = useState(""); // –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ

  const token = localStorage.getItem("access_token");

  // –°–ø–∏—Å–æ–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
  const motivationalVideos = [
    "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    "https://www.youtube.com/watch?v=1K1U4sRnsKw",
    "https://www.youtube.com/watch?v=xfq_A8yR3A0",
    "https://www.youtube.com/watch?v=MtN1YnoL46Q",
  ];

  // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  const motivationalMessages = [
    "–¢—ã –Ω–µ –æ–¥–∏–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è, –≤–ø–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—Ö! üöÄ",
    "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, —Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üí™",
    "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–¥—Ç–∏, –∏ —É—Å–ø–µ—Ö –±—É–¥–µ—Ç —Ç–≤–æ–∏–º! üåü",
    "–ö–∞–∂–¥—ã–π —à–∞–≥ –≤–∞–∂–µ–Ω! –¢—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è! üî•",
  ];

  useEffect(() => {
    const fetchStatistics = async () => {
      if (!token) {
        console.error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        return;
      }

      try {
        const trainingResponse = await fetch(
          "http://localhost:8080/api/user/get_training_statistics",
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );
        const trainingData = await trainingResponse.json();

        const dietResponse = await fetch(
          "http://localhost:8080/api/user/get_diet_statistics",
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );
        const dietData = await dietResponse.json();

        // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–µ—Å—É
        const weightResponse = await fetch(
          "http://localhost:8080/api/user/get_weight_progress",
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );
        const weightData = await weightResponse.json();

        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω–∏–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const lazyResponse = await fetch(
          "http://localhost:8080/api/user/is_user_lazy",
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );
        const isLazy = await lazyResponse.json();

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log("Weight Progress Data:", weightData);
        console.log("Is user lazy?", isLazy);

        setTrainingStats(trainingData);
        setDietStats(dietData);
        setWeightProgress(weightData); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–µ—Å—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setIsLazy(isLazy); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω–∏–≤–æ—Å—Ç–∏

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–µ–Ω–∏–≤—ã–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        if (isLazy) {
          const randomLink =
            motivationalVideos[
              Math.floor(Math.random() * motivationalVideos.length)
            ];
          setMotivationalLink(randomLink);
          setOpenMotivationalDialog(true);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchStatistics();
  }, [token]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞
  const handleCloseMotivationalDialog = () => {
    setOpenMotivationalDialog(false);
  };

  if (loading) {
    return (
      <Box sx={{ width: "100%", p: 4 }}>
        <LinearProgress />
      </Box>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  if (!trainingStats || !dietStats || !weightProgress) {
    return <Typography sx={{ p: 4 }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</Typography>;
  }

  // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—á–∏
  const getMotivationalMessage = () => {
    const completionPercentage = trainingStats.completionPercentage;
    if (completionPercentage >= 90) {
      return "–¢—ã –ø—Ä–æ—Å—Ç–æ –º–∞—à–∏–Ω–∞! üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
    } else if (completionPercentage >= 70) {
      return "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üöÄ";
    } else if (completionPercentage >= 50) {
      return "–•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç! –ù–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! üí•";
    } else {
      return "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ö–∞–∂–¥—ã–π —à–∞–≥ –≤–∞–∂–µ–Ω! üåü";
    }
  };

  // –ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –ø–æ –≤–µ—Å—É
  const getWeightMotivation = () => {
    const weightChanges = weightProgress.weights;
    const latestWeight = weightChanges[weightChanges.length - 1].weight;
    const previousWeight = weightChanges[weightChanges.length - 2]?.weight;

    if (!previousWeight)
      return "–ó–∞–ø–∏—Å—ã–≤–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞, –∏ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—Å—è –≥—Ä–∞—Ñ–∏–∫! üöÄ";

    if (latestWeight < previousWeight) {
      return `–ö—Ä–∞—Å–∞–≤–∞! –¢—ã —Å–∫–∏–Ω—É–ª ${Math.abs(
        previousWeight - latestWeight
      ).toFixed(2)} –∫–≥! üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`;
    } else if (latestWeight > previousWeight) {
      return `–û–æ–æ, –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–±—Ä–∞–ª –≤–µ—Å. –í—Å–µ –±—É–¥–µ—Ç –æ–∫, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —Å–±—Ä–æ—Å–∏—Ç—å —ç—Ç–æ!`;
    } else {
      return "–í–µ—Å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥! üå±";
    }
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const weightDates = weightProgress.weights.map((entry) => entry.weightDate);
  const weightValues = weightProgress.weights.map((entry) => entry.weight);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const data = {
    labels: weightDates,
    datasets: [
      {
        label: "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–µ—Å—É (–∫–≥)",
        data: weightValues,
        fill: false,
        borderColor: "rgba(75,192,192,1)",
        tension: 0.1,
      },
    ],
  };

  return (
    <div>
      <Header />
      <Container maxWidth="md" sx={{ mt: 4 }}>
        {/* –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ—á—å */}
        <Box sx={{ mb: 4, textAlign: "center" }}>
          <Typography variant="h4" gutterBottom>
            –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
          </Typography>
          <Typography
            variant="h6"
            sx={{ fontStyle: "italic", color: "text.secondary" }}
          >
            {getMotivationalMessage()}
          </Typography>
        </Box>

        <Grid container spacing={3}>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ */}
          <Grid item xs={12} md={6}>
            <Card sx={{ p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  üèãÔ∏è‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                </Typography>
                <Divider sx={{ mb: 2 }} />
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</strong>{" "}
                  {trainingStats.totalTrainings}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</strong>{" "}
                  {trainingStats.completedTrainings}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</strong>{" "}
                  {trainingStats.completionPercentage.toFixed(2)}%{" "}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–°—Ä–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:</strong>{" "}
                  {trainingStats.averageExercisesPerTraining.toFixed(2)}{" "}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</strong>{" "}
                  {trainingStats.totalCompletedExercises}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–ö–∞—Ä–¥–∏–æ-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</strong>{" "}
                  {trainingStats.cardioExercisesCount}
                </Typography>
              </CardContent>
            </Card>
          </Grid>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è */}
          <Grid item xs={12} md={6}>
            <Card sx={{ p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  üçé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
                </Typography>
                <Divider sx={{ mb: 2 }} />
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–î–Ω–µ–π –Ω–∞ –¥–∏–µ—Ç–µ:</strong> {dietStats.totalDietDays}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:</strong>{" "}
                  {dietStats.totalCalories.toFixed(2)}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–ë–µ–ª–∫–∏:</strong> {dietStats.totalProtein.toFixed(2)} –≥{" "}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–ñ–∏—Ä—ã:</strong> {dietStats.totalFats.toFixed(2)} –≥{" "}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–£–≥–ª–µ–≤–æ–¥—ã:</strong> {dietStats.totalCarbs.toFixed(2)} –≥{" "}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–°—Ä–µ–¥–Ω—è—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å:</strong>{" "}
                  {dietStats.averageCaloriesPerDay.toFixed(2)}{" "}
                </Typography>
                <Typography variant="body1" sx={{ mb: 1 }}>
                  <strong>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å:</strong>{" "}
                  {dietStats.averageMealsPerDay.toFixed(2)}
                </Typography>
              </CardContent>
            </Card>
          </Grid>

          {/* –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–µ—Å—É */}
          <Grid item xs={12}>
            <Card sx={{ p: 2 }}>
              <CardContent>
                <Typography variant="h5" gutterBottom>
                  ‚öñÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–µ—Å—É
                </Typography>
                <Divider sx={{ mb: 2 }} />
                <Line data={data} />
                <Box sx={{ mt: 2, textAlign: "center" }}>
                  <Typography
                    variant="h6"
                    sx={{ fontStyle: "italic", color: "text.secondary" }}
                  >
                    {getWeightMotivation()}
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Container>
    </div>
  );
};

export default Profile;
